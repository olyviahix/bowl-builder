{"version":3,"file":"google-sheets-mapper.cjs.production.min.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import {\n  MapperOptions,\n  MapperState,\n  ApiResponse,\n  ValueRange,\n  SheetsResponse,\n  SheetFromResponse,\n  ValueRangesResponse,\n  SheetsOption,\n} from './types';\n\nconst GOOGLE_API_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\n\nconst getRanges = (sheetNames: string[] = []): string => {\n  // ranges=Sheet1&ranges=Sheet2\n  return sheetNames.map((sheetName) => `ranges=${sheetName}`).join('&');\n};\n\nconst getSheetsTitleUrl = (sheetId: string, apiKey: string): string => {\n  return `${GOOGLE_API_URL}/${sheetId}?fields=sheets%2Fproperties%2Ftitle&key=${apiKey}`;\n};\n\nconst getBatchUrl = (\n  sheetId: string,\n  ranges: Array<string>,\n  apiKey: string,\n): string => {\n  const rangesQueryString = getRanges(ranges);\n\n  return `${GOOGLE_API_URL}/${sheetId}/values:batchGet?${rangesQueryString}&key=${apiKey}`;\n};\n\nclass ApiResponseError extends Error {\n  constructor(message: string, public readonly response: ApiResponse) {\n    super(message);\n    Object.setPrototypeOf(this, ApiResponseError.prototype);\n    this.response = response;\n    Error.captureStackTrace(this, ApiResponseError);\n  }\n}\n\nconst makeFetch = async (url: string, config = {}): Promise<any> => {\n  try {\n    const response = await fetch(url, config);\n\n    if (!response.ok) {\n      throw new ApiResponseError(\n        `Request to '${url}' failed with ${response.status}${\n          response.statusText ? `: ${response.statusText}` : ''\n        }`,\n        {\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n        },\n      );\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\nconst mapRecords = (records: ValueRange['values'], headerData: string[]) => {\n  return records\n    .filter((record: string[]) => record.length > 0)\n    .map((record: string[]) =>\n      record.reduce(\n        (obj: { [key: string]: unknown }, item: string, index: number) => {\n          obj[headerData[index]] = item;\n          return obj;\n        },\n        {},\n      ),\n    );\n};\n\nexport const mapData = ({\n  sheets,\n  sheetsOptions = [],\n}: {\n  sheets: ValueRange[];\n  sheetsOptions?: SheetsOption[];\n}): MapperState[] => {\n  return sheets.map((sheet: ValueRange) => {\n    const id = sheet.range.split('!')[0].replace(/'/g, '');\n    const rows = sheet.values || [];\n\n    if (rows.length > 0) {\n      const sheetsOptionsSheet = sheetsOptions.find(\n        (sheet: SheetsOption) => sheet.id === id,\n      );\n      const headerRowIndex = sheetsOptionsSheet?.headerRowIndex ?? 0;\n      const header = rows[headerRowIndex];\n      const records = rows.filter((_, index: number) => index > headerRowIndex);\n      const recordsData = mapRecords(records, header);\n\n      return {\n        id,\n        data: recordsData,\n      };\n    }\n\n    return {\n      id,\n      data: [],\n    };\n  });\n};\n\nexport const fetchBatchData = async ({\n  apiKey,\n  sheetId,\n  sheetsOptions = [],\n}: MapperOptions): Promise<ValueRangesResponse> => {\n  const sheetsNames = sheetsOptions.map((option: SheetsOption) => option.id);\n  const url = getBatchUrl(sheetId, sheetsNames, apiKey);\n\n  return await makeFetch(url);\n};\n\nexport const fetchAllSheetsData = async ({\n  apiKey,\n  sheetId,\n}: MapperOptions): Promise<ValueRangesResponse> => {\n  const urlTitles = getSheetsTitleUrl(sheetId, apiKey);\n  const { sheets }: SheetsResponse = await makeFetch(urlTitles);\n  const sheetsOptions = sheets.map((sheet: SheetFromResponse) => ({\n    id: sheet.properties.title,\n  }));\n\n  return await fetchBatchData({ apiKey, sheetId, sheetsOptions });\n};\n","import { MapperOptions, MapperState, ValueRangesResponse } from './types';\nimport { fetchBatchData, fetchAllSheetsData, mapData } from './utils';\n\nconst GoogleSheetsMapper = {\n  async fetchGoogleSheetsData({\n    apiKey,\n    sheetId,\n    sheetsOptions = [],\n  }: MapperOptions): Promise<MapperState[]> {\n    try {\n      const response: ValueRangesResponse =\n        sheetsOptions.length === 0\n          ? await fetchAllSheetsData({ apiKey, sheetId })\n          : await fetchBatchData({ apiKey, sheetId, sheetsOptions });\n\n      return mapData({ sheets: response.valueRanges, sheetsOptions });\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n\nexport default GoogleSheetsMapper;\nexport const fetchGoogleSheetsData = GoogleSheetsMapper.fetchGoogleSheetsData;\n"],"names":["GOOGLE_API_URL","getSheetsTitleUrl","sheetId","apiKey","getBatchUrl","ranges","sheetNames","rangesQueryString","map","sheetName","join","ApiResponseError","message","response","_this","Object","setPrototypeOf","prototype","Error","captureStackTrace","makeFetch","url","config","_context","fetch","ok","status","statusText","json","console","error","mapData","sheetsOptions","sheets","sheet","records","headerData","id","range","split","replace","rows","values","length","sheetsOptionsSheet","find","headerRowIndex","header","recordsData","filter","_","index","record","reduce","obj","item","data","fetchBatchData","sheetsNames","option","_context2","fetchAllSheetsData","urlTitles","_context3","properties","title","GoogleSheetsMapper","fetchGoogleSheetsData","valueRanges"],"mappings":"29PAWA,IAAMA,EAAiB,gDAOjBC,EAAoB,SAACC,EAAiBC,GAC1C,OAAUH,MAAkBE,6CAAkDC,GAG1EC,EAAc,SAClBF,EACAG,EACAF,GAEA,IAdiBG,EAcXC,aAdWD,EAcmBD,KAdnBC,EAAuB,IAEjCA,EAAWE,KAAI,SAACC,GAAD,gBAAyBA,KAAaC,KAAK,MAcjE,OAAUV,MAAkBE,sBAA2BK,UAAyBJ,GAG5EQ,sBACJ,WAAYC,EAAiCC,gBAC3CC,cAAMF,mBADqCC,EAE3CE,OAAOC,oBAAqBL,EAAiBM,WAC7CH,EAAKD,SAAWA,EAChBK,MAAMC,uBAAwBR,iGALHO,QASzBE,aAAS,kBAAG,WAAOC,EAAaC,GAApB,MAAA,6BAAA,OAAA,sBAAA,OAAA,gBAAoBA,IAAAA,EAAS,IAA7BC,SAAAA,SAESC,MAAMH,EAAKC,GAFpB,OAAA,IAERT,UAEQY,IAJAF,SAAA,MAAA,MAKN,IAAIZ,iBACOU,mBAAoBR,EAASa,QAC1Cb,EAASc,gBAAkBd,EAASc,WAAe,IAErD,CACED,OAAQb,EAASa,OACjBC,WAAYd,EAASc,WACrBN,IAAKR,EAASQ,MAZN,OAAA,OAAAE,SAiBDV,EAASe,OAjBR,OAAA,iCAAA,QAAA,MAAAL,UAAAA,gBAmBdM,QAAQC,iBAnBM,QAAA,UAAA,wCAAH,qBAAA,mCAsCFC,EAAU,oBAErBC,cAAAA,aAAgB,KAKhB,SANAC,OAMczB,KAAI,SAAC0B,GACjB,IAtBgBC,EAA+BC,EAsBzCC,EAAKH,EAAMI,MAAMC,MAAM,KAAK,GAAGC,QAAQ,KAAM,IAC7CC,EAAOP,EAAMQ,QAAU,GAE7B,GAAID,EAAKE,OAAS,EAAG,CAAA,MACbC,EAAqBZ,EAAca,MACvC,SAACX,GAAD,OAAyBA,EAAMG,KAAOA,KAElCS,iBAAiBF,SAAAA,EAAoBE,kBAAkB,EACvDC,EAASN,EAAKK,GAEdE,GAhCQb,EA+BEM,EAAKQ,QAAO,SAACC,EAAGC,GAAJ,OAAsBA,EAAQL,KA/BbV,EAgCLW,EA/BrCZ,EACJc,QAAO,SAACG,GAAD,OAAsBA,EAAOT,OAAS,KAC7CnC,KAAI,SAAC4C,GAAD,OACHA,EAAOC,QACL,SAACC,EAAiCC,EAAcJ,GAE9C,OADAG,EAAIlB,EAAWe,IAAUI,EAClBD,IAET,QAyBF,MAAO,CACLjB,GAAAA,EACAmB,KAAMR,GAIV,MAAO,CACLX,GAAAA,EACAmB,KAAM,QAKCC,aAAc,kBAAG,cAAA,cAAA,6BAAA,OAAA,sBAAA,OAAA,OAC5BtD,IAAAA,OACAD,IAAAA,QAGMwD,iBAFN1B,eAAgB,MAEkBxB,KAAI,SAACmD,GAAD,OAA0BA,EAAOtB,MACjEhB,EAAMjB,EAAYF,EAASwD,EAAavD,GANlByD,SAQfxC,EAAUC,GARK,OAAA,iCAAA,OAAA,UAAA,0BAAH,mBAAA,mCAWdwC,aAAkB,kBAAG,cAAA,YAAA,6BAAA,OAAA,sBAAA,OAAA,OAI1BC,EAAY7D,EAFlBC,IAAAA,QADAC,IAAAA,QADgC4D,SAKS3C,EAAU0C,GALnB,OAAA,OAM1B9B,SADEC,OACqBzB,KAAI,SAAC0B,GAAD,MAA+B,CAC9DG,GAAIH,EAAM8B,WAAWC,UAPSF,SAUnBN,EAAe,CAAEtD,OAAAA,EAAQD,QAAAA,EAAS8B,cAAAA,IAVf,OAAA,iCAAA,QAAA,UAAA,0BAAH,mBAAA,mCCxHzBkC,EAAqB,CACnBC,kJACJhE,IAAAA,OACAD,IAAAA,QACA8B,gBAAAA,eAAgB,cAIa,IAAzBA,EAAcW,uCACJkB,EAAmB,CAAE1D,OAAAA,EAAQD,QAAAA,+DAC7BuD,EAAe,CAAEtD,OAAAA,EAAQD,QAAAA,EAAS8B,cAAAA,yDAEvCD,EAAQ,CAAEE,YAAiBmC,YAAapC,cAAAA,gHAQxCmC,EAAwBD,EAAmBC"}